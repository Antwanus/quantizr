version: '3.7'
services:

    mongo-prod: 
        container_name: mongo-prod
        volumes:
            - '/var/lib/mongodb:/data/db'
            - '/home/clay/quanta-data/mongo-dumps:/mongo-dumps'
            - '/home/clay/quanta-data/mongo-scripts:/mongo-scripts'
            - '/home/clay/quanta-data/mongo-conf/mongod.conf:/etc/mongod.conf'
        command: mongod --config /etc/mongod.conf
        ports:
            - '27017:27017'
        networks:
            - net-prod
        # Always specify version of mongo. When it upgrades automatically there can be database issues that need to be resolved
        # and we don't want that happening unexpectedly
        image: mongo:4.0

    ipfs: 
        container_name: ipfs_host_prod 
        environment:
            routing: "dhtclient" 
            IPFS_PROFILE: "server"
            IPFS_PATH: "/ipfsdata"
        volumes:
            - '${ipfs_staging}:/export'
            - '${ipfs_data}:/ipfsdata'
        ports:
            - "4001:4001"
            - "8080:8080"
            - "8081:8081"
            - "5001:5001"
        networks:
            - net-prod
        image: ipfs/go-ipfs:latest

    subnode-prod:
        build: 
            context: .
            dockerfile: dockerfile-prod
        container_name: subnode-prod
        expose:
            - '443'
            - '80'
            # Uncomment for debugging...
            #- '8000'
        volumes:
            - '/home/clay/quanta-data/docs:/docs'
            - '/home/clay/quanta-data/tmp:/subnode-tmp'
            - '/home/clay/quanta-data/log:/subnode-log'
            - '/etc/letsencrypt/live/quanta.wiki:/letsencrypt'
        ports:
            - '443:443'
            - '80:80'
            # Uncomment for debugging...
            #- '8000:8000'
        networks:
            - net-prod
        environment:
            mongoAdminPassword: "${subnodePassword}"
            reCaptcha3SiteKey: "${reCaptcha3SiteKey}"
            reCaptcha3SecretKey: "${reCaptcha3SecretKey}" 
            mongoSecurity: "true"
            testUserAccounts: "adam:${testPassword}:${devEmail},bob:${testPassword}:${devEmail},cory:${testPassword}:${devEmail},dan:${testPassword}:${devEmail}" 
            spring.config.location: "classpath:/application.properties" 
            mongodb.host: "mongo-prod" 
            mongodb.port: "27017"
            profileName: "prod" 
            server.port: "443" 
            httpProtocol: "https" 
            metaHost: "quanta.wiki" 
            reSaveAll: "false"
            allowFileSystemSearch: "false" 
            forceIndexRebuild: "false"
            spring.http.multipart.max-file-size: "200MB" 
            spring.http.multipart.max-request-size: "200MB" 
            spring.servlet.multipart.max-file-size: "200MB"
            spring.servlet.multipart.max-request-size: "200MB"
            adminDataFolder: "/subnode-tmp" 
            # Uncomment for debugging... (don't forget to open ufw firewall for port on server)
            #JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=0.0.0.0:8000,server=y,suspend=n"
            ipfs.host: "http://ipfs:5001"
            enableRssDaemon: "false"

            security.require-ssl: "true" 
            server.ssl.key-store: "/letsencrypt/keystore.p12" 
            server.ssl.key-store-password: "${prodKeyStorePassword}" 
            server.ssl.keyStoreType: "PKCS12" 
            server.ssl.keyAlias: "tomcat" 

            mail.port: ""
            mail.user: "postmaster@quantizr.com"
            mail.password: "${emailPassword}" 
            mail.host: "smtp.mailgun.org" 
            mail.from: "admin@quanta.wiki"

        image: subnode-prod
        depends_on:
            - mongo-prod
            - ipfs

# https://docs.docker.com/compose/networking/

networks:
  net-prod:
    driver: bridge
    external: false
    name: net-prod

# To force compose to use an externally pre-created network outside this compose file you can do this
# networks:
#   default:
#     external:
#       name: my-pre-existing-network