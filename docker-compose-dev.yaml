version: '3.7'
services:

    # Note: Container Names are automatically available as 'host names' (as in networking http://host:port)
    # Networked service-to-service communication use the CONTAINER_PORT in [host]:[container] pairs below.

    # Theoretically it should have been possible to let mongo run internally on 27017 (it's default) and then expose it
    # to the outside as 27016, but I never could get that to work, so I'm just setting it up to run at 27016 both
    # internaly and externally
    #
    # NOTE: Minimal requirements for the mongod.conf is to have the port set as 27016, and the data db set
    mongo-dev: 
        container_name: mongo-dev 
        # WARNING: volumes will not handle '~' character for home folder. Do not use.
        volumes:
            - '${MONGO_BASE}/mongodb-data-dev:/data/db'
            - '${MONGO_BASE}/mongo-dumps-dev:/mongo-dumps'
            - '${MONGO_BASE}/mongo-scripts-dev:/mongo-scripts'
            - '${MONGO_BASE}/secrets/mongod--localhost-dev.conf:/etc/mongod.conf'
        #NOTE: This 'command' property is only needed when we want to start mongod on a port other than 27017    
        command: mongod --config /etc/mongod.conf
        #entrypoint: ["mongod","--config","/etc/mongod.conf"]
        ports:
            - '27016:27016'
        env_file: 
            - '../secrets/mongo.env'
        networks:
           - net-dev
        # Always specify version of mongo. When it upgrades automatically there can be database issues that need to be resolved
        # and we don't want that happening unexpectedly
        image: mongo:4.0

    # https://hub.docker.com/r/ipfs/go-ipfs/
    ipfs: 
        container_name: ipfs 
        environment:
            # I think some of these env options may be obsolete now?
            # From go-ipfs github developer: 
            #    Enabling the "lowpower" profile should help. That will disable background data reproviding, set really 
            #    low connection manager limits, and put your node into dhtclient mode.
            routing: "dhtclient" 
            IPFS_PROFILE: "server"
            IPFS_PATH: "/data/ipfs"
            # LIBP2P_FORCE_PNET: 1
        expose:
        #    # do we need 4001. it's for swarm right?
        #     - '4001'
             - '8080'
        #     - '5001'
        # WARNING: volumes will not handle '~' character for home folder. Do not use.
        volumes:
            - '${ipfs_staging}:/export'
            - '${ipfs_data}:/data/ipfs'
            # Note: I saw an example online using :/data/ipfs here instead.
        ports:
            - "4001:4001"
            - "8080:8080"
            - "5001:5001"
        networks:
            - net-dev
        image: ipfs/go-ipfs:v0.7.0

    subnode-dev:
        build: 
            context: .
            dockerfile: dockerfile-dev
        container_name: subnode-dev
        expose:
            - '8182'
            - '8000'
        volumes:
            - '${QUANTA_BASE}/tmp:/tmp'
            - '${QUANTA_BASE}/log:/log'
            - '${QUANTA_BASE}/lucene:/subnode-lucene'
            # Now that 'loader-path' is here, we don't need /dev-resource-base !!
            # (So I will be mothballing resourcesBaseFolder approach soon)
            # UPDATE: loader-path seems to have lost it's ability to load Javascript...switching back to using dev-resource-base for now (todo-1)
            - '${PRJROOT}/src/main/resources/public:/dev-resource-base'
            - '${PRJROOT}/target/classes:/loader-path'
        ports:
            # '[host]:[container]'
            - '8182:8182'
            - '8000:8000'
        networks:
            - net-dev
        environment:
            # Can be a comma-delimited list of TestIntf-derived tests to run
            # runTests: "ActPubTest"
            
            mongoAdminPassword: "${subnodePassword}"
            reCaptcha3SiteKey: "${reCaptcha3SiteKey}"
            reCaptcha3SecretKey: "${reCaptcha3SecretKey}" 
            mongoSecurity: "true"
            testUserAccounts: "adam:${testPassword}:${devEmail},bob:${testPassword}:${devEmail},cory:${testPassword}:${devEmail},dan:${testPassword}:${devEmail}" 
            resourcesBaseFolder: "file:///dev-resource-base/" 
            spring.config.location: "classpath:/application.properties" 
            mongodb.host: "mongo-dev" 
            mongodb.port: "27016" 
            profileName: "dev" 
            server.port: "8182" 
            httpProtocol: "http" 
            metaHost: "localhost" 
            reSaveAll: "false"
            forceIndexRebuild: "false"
            allowFileSystemSearch: "false" 
            spring.http.multipart.max-file-size: "200MB" 
            spring.http.multipart.max-request-size: "200MB" 
            spring.servlet.multipart.max-file-size: "200MB"
            spring.servlet.multipart.max-request-size: "200MB"
            adminDataFolder: "/tmp" 
            mail.port: ""
            mail.user: "postmaster@quantizr.com" 
            mail.password: "${emailPassword}" 
            mail.host: "smtp.mailgun.org" 
            mail.from: "admin@quanta.wiki"
            JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,address=0.0.0.0:8000,server=y,suspend=n"
            ipfs.host: "http://ipfs:5001"
            # This is the node name for a feed like this: http://localhost:8182/multiRss?id=:podcast-set to cause that feed to precache
            rssAggregatePreCacheNodeId_XX: ":podcast-set"
        image: subnode-dev
        depends_on:
            - mongo-dev
            - ipfs

# https://docs.docker.com/compose/networking/

networks:
  net-dev:
    driver: bridge
    external: false
    name: net-dev

# To force compose to use an externally pre-created network outside this compose file you can do this
# networks:
#   default:
#     external:
#       name: my-pre-existing-network
