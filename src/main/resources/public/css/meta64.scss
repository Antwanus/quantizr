
@import "variables.scss";

$rootNodeBorder: true;
$highlightActiveMenuItems: false;

$border-radius: .3rem;
$borderRadiusLarge: 1em;
$borderRadiusMedium: .6em;

$input-bg: $gray-700;
$input-color: white;
$input-color-placeholder: #999;

$scrollTrack: $gray-900;
$scrollThumb: $gray-700;

//rgb(21,32,43); twitter background
$body-bg: rgb(32, 34, 36);
$body-color: white;

$disabled-body-color: gray; //darken($body-color, 90%);

@import "../node_modules/bootstrap/scss/bootstrap";

@import "bootswatch.scss";

//This does work (border around focused edit fields) but I don't need it.
// .form-control:focus {
//     border-color: green;
//     box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(255, 0, 0, 0.6);
// }

$menuItemHoverBackgroundColor: $primary;
$nodeBorderBottomColor: $gray-700;

$createdByMeBackgroundColor: green;
$createdByMeTextColor: white;

$listBackgroundColor: lightGray;

$smallGap: 12px;
$tinyGap: 8px;

$lightenRowFactor: 1.75;

/* warning: this 9px should match the 9px highlight border in Comp.ts */
$fatBorderSize: 9px;
$mediumBorderSize: 6px;
$smallBorderSize: 3px;

html {
    // not supported by all browers.
    // scroll-behavior: smooth;

    font-family: "Roboto", "Verdana", "Aria";
} 

body {
    /* This top-padding is how the bootstrap example keept the main content from being covered by the navbar */
    font-family: "Roboto", "Verdana", "Aria";
    padding-top: 4rem;
    padding-bottom: 1rem;
}

.highlightBorder {
    border: 2px solid green;
}

.binary-link {
    margin-left: $smallGap;
    margin-bottom: $smallGap;
    font-weight: bold; 
}

.normalText {
    font-weight: normal;
}

.avatarImage {
    border-radius: $borderRadiusMedium;
    max-width: 80px;
    cursor: pointer;
    margin-top: 8px;
    margin-left: 8px;
}

.main-navbar {
    padding: $tinyGap;
}

/* This is how the search terms get highlighted by wrapping them like this in 
the markdown **_term_** */
strong em { 
    font-style: normal; 
    font-weight: bold; 
    background-color: green;
} 

.textfield-label {
    margin-bottom: 0px;
}

.checkbox-label {
    margin-bottom: 0px;
}

.button-font {
    font-family: "Roboto", "Verdana", "Aria";
}

.form-group-border {
    border: 1px solid $gray-600;
    border-radius: .6em;
}

.edit-props-table {
    margin-top: 5px;
    margin-bottom: 5px;
    padding: $smallGap;
}

.fixedFont {
    font-family: 'Courier New', Courier, monospace;
}

.file-link {
    margin-top: $smallGap;
    margin-left: $smallGap;
    font-family: 'Courier New', Courier, monospace;
    font-weight: bold;
}

.folder-link {
    margin-top: $smallGap;
    margin-left: $smallGap;
    font-family: 'Courier New', Courier, monospace;
    font-weight: bold;
}

.dlgContainer {
    display: none;
}

.overlay {
    z-index: 2147483647;
    background-color: rgba(1, 1, 1, 0.1);
    bottom: 0;
    left: 0;
    position: fixed;
    right: 0;
    top: 0;
    cursor: progress;
    display: none;
}

/* The Modal (background) */

.app-modal-title {
    margin-bottom: $smallGap;
    font-size: 150%;
}

.app-modal-title-close-icon {
    cursor: pointer;
    font-size: 125%;

    //this icon vertical centering doesn't work, but it's acceptable looking.
    vertical-align: middle;
}
 
.app-modal {
    //display: none;
    position: fixed;
    z-index: 16000000;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

/* Modal Content/ Dialog Box. This is the outter frame of the dialog itself */

.app-modal-content {
    background-color: $modal-content-bg;
    border: 2px solid $modal-content-border-color;
    margin: $smallGap auto;
    padding: $smallGap;
    width: 75%;
    border-radius: .7em;
    max-width: 800px;
}

.app-modal-content-narrow-width {
    @extend .app-modal-content;
    max-width: 500px;
}

.app-modal-content-medium-width {
    @extend .app-modal-content;
    max-width: 650px;
}

.app-modal-content-fullscreen {
    background-color: $modal-content-bg;
    padding: $smallGap;
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    overflow: auto;
}

//We hav this 80% width version so that the main menu can use it because to close that without selecting an option
//the user needs space to click in outside the menu which closes the menu.
.app-modal-content-almost-fullscreen {
    border: 2px solid $modal-content-border-color;
    background-color: $modal-content-bg;
    padding: $smallGap;
    width: 80%;
    height: 100%;
}

/* Modal Content/ Dialog Box */

.menuContainer {
    min-width: 16em;
    width: 16em;
}

.app-modal-menu {
    border: 2px solid $modal-content-border-color;
    left: 0;
    top: 0;
    padding: 0px;
    width: 20%;
    margin-top: 60px;
    margin-left: $smallGap;
    margin-right: $smallGap;
    margin-bottom: $smallGap;
    max-width: 400px;
    min-width: 350px;
    background-color: $modal-content-bg;
}

.leftNavPanel {
    overflow-y: auto;
    
    max-height: 90%;
    height: 90%;
    
    padding-left: 15px;
    padding-right: 10px;
    padding-top: 15px;

    //I have a hunch this pass padding should be the same as the height
    //of the top nav panel, and is also related to the 'body' having a margin/padding
    //also in place to make that titlebar work with body scrolling.
    padding-bottom: 10px;
}

.customScrollbar::-webkit-scrollbar-track {
	-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
	border-radius: 8px;
	background-color: $scrollTrack;
}

.customScrollbar::-webkit-scrollbar {
	width: 16px;
	background-color: $body-bg;
}

.customScrollbar::-webkit-scrollbar-thumb {
	border-radius: 8px;
	-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);
	background-color: $scrollThumb;
}

.rightNavPanel {
    padding: 15px; 
}

.my-tab-pane {
    width: 100%;
    padding-top: $smallGap;
}

.tab-content {
    margin-left: 0px;
    margin-right: 0px;
}

.ipfs-text {
    margin: $smallGap;
    padding: 5px;
}

.navbar-brand {
    margin-left: $smallGap;
}

.nav-tabs {
    border: none;
}

.nav-tabs>.nav-item>.nav-link {
    border: $mediumBorderSize solid transparent; 
    border-radius: $borderRadiusLarge; 
    cursor: pointer;
    font-weight: bold;
}

.nav-tabs>.nav-item>.nav-link:hover {
    border: $mediumBorderSize solid transparent; 
    border-radius: $borderRadiusLarge; 
    cursor: pointer;
    font-weight: bold;
}

.nav-tabs>.nav-item>.nav-link.active,
.nav-tabs>.nav-item>.nav-link.active:hover,
.nav-tabs>.nav-item>.nav-link.active:focus {
    border: $mediumBorderSize solid $nodeBorderBottomColor; 
    border-radius: $borderRadiusLarge; 
    cursor: pointer;
    font-weight: bold;
}

.menuPanel {
    //border: 2px solid $nodeBorderBottomColor; 
    background-color: transparent;
}

.small-margin-right {
    margin-right: 8px;
}

input[type="checkbox"] {
    height: 25px;
    width: 25px;
    margin: 8px;
}

input[type="radio"] {
    height: 25px;
    width: 25px;
    margin: 8px;
}

.edit-prop-checkbox-col {
    width: 50px;
    display: table-cell;
    margin-left: 16px;
}

.edit-prop-textfield-col {
    display: table-cell;
}

.row-toolbar {
    margin-left: 16px;
}

/* I experimented with limiting height of rows and allowing individual scrolling on nodes but
   i think usability and asthetics make this slightly awkward. You can simply uncomment these styles
   and look, any time, to remember what that looks like. The style is in place in the code
   */

.tallTextContent {
    max-height: 650px;
}   

.centeredTitle {
    width: 500px;
    /* This margin trick causes horizontal centering */
    margin: 0 auto;
}

.mainMenuItemDisabled {
    cursor: auto;
    font-weight: lighter;
    background-color: transparent;
    //font-style: italic;
    color: $disabled-body-color;
    padding: 5px; 

    @if $highlightActiveMenuItems {
        border-left: 5px solid transparent;     
    }
}

.mainMenuItemDisabled:hover {
    cursor: auto;
    font-weight: lighter;
    background-color: transparent;
    //font-style: italic;
    color: $disabled-body-color;
}

.mainMenuItemEnabled {
    cursor: pointer;
    font-weight: normal;
    background-color: transparent;

    @if $highlightActiveMenuItems {
        border-left: 5px solid $nodeBorderBottomColor; 
    } 
    padding: 5px;
}

.menuCard {
    border: none;
    border-radius: 0;
    background-color: transparent;
}

.list-group-menu-item {
    background-color: transparent;
    padding: 10px;
}

.list-group-transparent {
    background-color: transparent;
    padding: 10px; 
}

.menuHeading {
    cursor: pointer;
    //background-color: $list-group-bg;
    background-color: transparent;
    border: none;
    border-radius: 0;
    padding: 10px; 
}

.menuHeading:hover {
    background-color: $menuItemHoverBackgroundColor;
    border-radius: 0;
}

.menuHeading[aria-expanded=true] {
    background-color: $secondary;
    border-radius: 0;
}

.mainMenuItemEnabled:hover {
    cursor: pointer;
    background-color: $menuItemHoverBackgroundColor;
}

.audioDownloadLink {
    margin-left: $smallGap;
}

.videoDownloadLink {
    margin-left: $smallGap;
}

.marginLeft {
    margin-left: $smallGap;
}

.marginRight {
    margin-right: $smallGap;
}

.marginTop {
    margin-top: $smallGap;
}

.marginBottom {
    margin-bottom: $smallGap;
}

.marginAll {
    margin: $smallGap;
}

.listBoxRow {
    cursor: pointer;
}

.listBoxRow:hover {
    cursor: pointer;
    background-color: $menuItemHoverBackgroundColor;
}

.selectedListItem {
    background-color: $secondary;
}

.small-padding {
    margin-top: 7px;
    padding: 4px;
}

.horizontalLayout {
    //margin-top: 5px;
    //margin-left: 5px;
}

/* Warning: setting any kind of left margin won't work becasue the btn-group? style of bootstrap overrides it in button groups */

.btn {
    border-radius: 0 !important;
}

.btn[disabled] {
    font-style: italic;
    cursor: auto;
}

.basicButton {
    //margin-right: 7px;
}

.pre-textarea, .pre-textfield {
     //WARNING: Setting a font family here (other than inherit) causes noticeable flicker whenever react re-renders (during focus and blur eventing), 
     //but the solution appeared to be to set the font on the PARENT div of an input control (to monospace), and then use 'inherit' here as the actual font-family.
    font-family: inherit; //monospace;
}

.my-ace-editor {
    border: 1px solid $gray-500;
}

.textfield {
    margin-bottom: $smallGap;
}

/* We use a tiny gap for password text fields so that the 'Show Password" button can be very close below */
.passwordTextField {
    margin-bottom: $tinyGap;
}

.rowIcon {
    margin-left: 10px;
    margin-right: 6px;
    vertical-align: 'middle';
    cursor: pointer;
}

.passwordEyeIcon {
    cursor: pointer;
    margin-left: 10px;
}

.bash-exec-button {
    margin: 1em;
}

.bash-script {
    margin-left: 1em;
    margin-top: 1em;
}

// These borders make the hash-created titles (like '### Title') look really attractive, but it looks ugly 
// when there's a single line title in the root node which itself has a border (and must for clarity as the root node)
// so for now let's now do these unless/until we find a better way to indicate to user clearly that the root node
// is a very special one relative to the page.
//
// .markdown-content h1 {
//     border-bottom: 4px solid $gray-700;
// }

// .markdown-content h2 {
//     border-bottom: 3px solid $gray-700;
// }

// .markdown-content h3 {
//     border-bottom: 2px solid $gray-700;
// }

// .markdown-content h4 {
//     border-bottom: 1px solid $gray-700;
// }

// .markdown-content h5 {
//     // border-bottom: 1px solid $gray-700;
// }

// .markdown-content h6 {
//     // border-bottom: 1px solid $gray-700;
// }

.markdown-content kbd,
.markdown-content pre,
.markdown-content samp {
    /*
    background-color: black;
    color: green;
    font-weight: bold;
    
    display: block;
    font-family: monospace;
    white-space: pre;
    */
    //font-size: 10%;
    /* overflow: auto; 
    max-height: 15em;
    border: 1px dotted gray;
    */
    
    width: 800px; 
    border: 1px dotted green;
}

.attached-img {
    cursor: pointer;
    margin-left: $smallGap;
    margin-bottom: $smallGap;
    border-radius: .6em;
    border: 1px solid $gray-700
}

.meta64-input {
    max-width: 50%;
}

/* Dropzone message */

.dz-message {
    font-size: large;

    // todo-2: this background is dropzone-controled and it seems to have issues, so I'm just removing it for now.
    // background-image: url("/js/dropzone/upload.png");
    // background-repeat: no-repeat;
    // background-attachment: fixed;
    // background-position: center;
    // height: 100%;
}

.dropzone {
    border: 4px dashed lightGray;
    margin-bottom: 16px;
    height: 420px;
    padding: 0;
    overflow-y: auto;
    /* min-height: 0px !important; */
}

/* This tweak keeps the dropzone error message from covering up the 'remove file' link under the preview image
which it will do by default. */
.dropzone .dz-preview .dz-error-message {
    top: 150px!important;
}

.systemFileRow {
    margin-botom: 16px;
}

.systemFileActionLink {
    cursor: pointer;
    margin-right: 16px;
    border-bottom: 1px dotted gray;
}

.systemFile {
    font-family: Courier New, Courier, Roboto, Tahoma, Verdana, Arial;
    cursor: pointer;
    /* background: lightGray; */
    padding-bottom: 5px;
}

.ace-edit-panel {
    margin-top: $smallGap;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 200px;
}

.vert-space {
    display: block;
    height: 0.5em;
}

.mainTabPanel {
    //border: 1px solid black;
    //background-color: $mainContentBackground;
    //setting a max-width here ruins the centering horizontally on the page, my goal was
    //to narrow the main tab content in center of page
    //WARNING: I think the bootstrap 'main' entity is what is setting the width here and it didn't work to chagne it here.
    // max-width: 750px;
    
    //I'd prefer to have NO margin, but the top margin is getting forced so I'll add a bottom margin for consistency for now
    margin-bottom: $smallGap;
    //margin-top: 0px;
    width: 100%;
}

.searchResultsPanel {
    // padding: $smallGap;
    // margin: $smallGap;
}

.timelinePanel {
    // padding: $smallGap;
    // margin: $smallGap;
}

.mainNodeContentStyle {
    outline: none;

    @if $rootNodeBorder {
        border: $mediumBorderSize solid $nodeBorderBottomColor; 
        border-radius: $borderRadiusLarge; 
    } 
    @else {
        border-left: $fatBorderSize solid $nodeBorderBottomColor; 
    }
    
    padding-right: 1em;
}

.vertical-layout-row {
    margin-bottom: $smallGap;
}

.dialog-header {
    font-weight: bold;
    font-size: large;
    margin-top: $smallGap;
    margin-bottom: $smallGap;
}

.created-by-me {
    background: $createdByMeBackgroundColor;
    color: $createdByMeTextColor;
    padding: 4px;
}

.created-by-other {
    padding: 4px;
}

.header-text {
    font-size: small;
    margin-left: 16px;
    padding-top: 10px;
}

.content-narrow {
    max-width: 650px;
}

.content-medium {
    max-width: 800px;
}

.content-wide {
    max-width: 950px;
}

.markdown-content {
    padding-top: 1em;
    padding-left: 1em;
    padding-right: 1em;
    padding-bottom: .5em;
}

.tags-content {
    margin-left: 1em;
    /* we limit page width of text content, because text that goes to wide
		becomes difficult to read.
	*/
    border: 1px dotted lightGray;
    max-width: 800px;
    background: #f9e79f;
}

.property-table {
    margin-left: 1em;
}

.prop-table-row {
    width: 100%;
}

.prop-table-name-col {
    width: 25%;
}

.prop-table-val-col {
    width: 70%;
}

.prop-table {
    width: 100%;
}

.node-table-row {
    position: relative;
    padding-right: 1em;
    outline: none;
}

.editing-border {
    border-bottom: 3px dotted lightslategray;
}

.non-editing-border {
    border-bottom: 1px dotted lightslategray;
}

/*
With "Display: table", the only way to get the internal 'node-grid-item' cell content to render with the SAME
height as the actual cell (i.e. fill up the entire cell) is to use "height: 100%" on the table, and the table-row, 
and the table-cell (all three)

update: oops, that 100% is causing vertical scrollbar to ALWAYS show up because something's off by a few pixels, so
i'm backing out for now
*/
.node-grid-table {
    display: table;
    width: 100%;
    table-layout: fixed;
    margin-top: 10px;
    //height: 100%;

    // if you ever need rounded cells, these two are needed with that.
    // border-collapse: separate;
    // border-spacing: 10px;
}

.node-grid-item {
    padding-right: 1.5em;
    outline: none;
    //height: 100%;
}

.node-grid-row {
    display: table-row;
}

.node-grid-cell {
    border: 1px dotted gray;
    overflow-x: auto;
    display: table-cell;
    //height: 100%;

    //not doing rounded cells because the selector (selected node) marker in them is asthetically ugly
    //border-radius: $borderRadiusMedium;
}

.node-table-row .top-right-image {
    position: absolute;
    top: 0;
    right: 0;
}

.active-row {
    border-left: $fatBorderSize solid $primary;
}

.active-row:hover {
    background-color: lighten($body-bg, $lightenRowFactor);
}

.inactive-row {
    border-left: $fatBorderSize solid transparent;
}

.inactive-row:hover {
    background-color: lighten($body-bg, $lightenRowFactor);
}

.active-row-main {
    @if $rootNodeBorder {
        border: $mediumBorderSize solid $primary;
    } 
    @else {
        border-left: $fatBorderSize solid $primary; 
    }
}

.active-row-main:hover {
    background-color: lighten($body-bg, $lightenRowFactor);
}

.inactive-row-main {
    @if $rootNodeBorder {
        border: $mediumBorderSize solid $nodeBorderBottomColor; 
    }
    @else {
        border-left: $fatBorderSize solid $nodeBorderBottomColor; 
    }
}

.inactive-row-main:hover {
    background-color: lighten($body-bg, $lightenRowFactor);
}

.main {
    background-color: #eee;
}

/* Media Queries below are per Bootstap 4 standard */

/* Small devices (tiny, 320px and up) */

/* Small devices (portrait phones?, 576px and up) */
@media (min-width: 576px) {
    .modal-lg {
        width: 500px;
        height: 800px;
    }

    .container{
        max-width: 500px;
    }
}

/* Medium devices (tablets, 768px and up) */
@media (min-width: 768px) {
    .modal-lg {
        width: 700px;
        height: 700px;
    }

    .container{
        max-width: 700px;
    }
}

/* Large devices (desktops, 992px and up) */
@media (min-width: 992px) {
    .modal-lg {
        width: 900px;
        height: 900px;
    }

    .container{
        max-width: 800px;
    }
}

/* Extra large devices (large desktops, 1200px and up) */

@media (min-width: 1200px) {
    .modal-lg {
        width: 1198px;
        height: 1198px;
    }

    .container{
        max-width: 1000px;
    }
}

/*
* Sidebar
*/

.sidebar {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    padding: 0;
    z-index: 100;
}

.sidebar-sticky {
    position: sticky;
    height: 100vh;
    overflow-x: hidden;
    overflow-y: auto;
    z-index: 101;
}

.sidebar .nav-link {
    font-weight: 500;
    color: #333;
}

.sidebar .nav-link .feather {
    margin-right: 4px;
    color: #999;
}

.sidebar .nav-link.active {
    color: #007bff;
}

.sidebar .nav-link:hover .feather,
.sidebar .nav-link.active .feather {
    color: inherit;
}

.sidebar-heading {
    font-size: 0.75rem;
}

.form-control-dark {
    color: #fff;
    background-color: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.1);
}

.form-control-dark:focus {
    border-color: transparent;
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.25);
}

.border-top {
    border-top: 1px solid #e5e5e5;
}

.border-bottom {
    border-bottom: 1px solid #e5e5e5;
}

.rss-feed-listing {
    margin-top: $smallGap;
    margin-left: $smallGap;
    max-width: 800px;
}

.testHighlight {
    background-color: green;
}
